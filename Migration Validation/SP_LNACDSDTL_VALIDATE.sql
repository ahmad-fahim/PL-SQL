CREATE OR REPLACE PROCEDURE SP_LNACDSDTL_VALIDATE (
   P_BRANCH_CODE       IN NUMBER ,
   P_START_DATE        IN DATE
    )
IS
   W_BRN_CODE          NUMBER (5) NOT NULL := P_BRANCH_CODE;
   W_MIG_DETE          DATE := P_START_DATE;
   W_ROWCOUNT          NUMBER := 0;


BEGIN
   DELETE  FROM  ERRORLOG WHERE TEMPLATE_NAME = 'MIG_LNACDSDTL';
   COMMIT;


--- matching account no with acnts

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_LNACDSDTL
   WHERE NVL(LNACDSDTL_INTERNAL_ACNUM, 0 ) NOT IN
      (SELECT ACNTS_ACNUM
         FROM MIG_ACNTS
        WHERE ACNTS_PROD_CODE IN
              (SELECT PRODUCT_CODE
                 FROM PRODUCTS
                WHERE PRODUCT_FOR_LOANS = 1));


  IF W_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACDSDTL',
       'LNACDSDTL_INTERNAL_ACNUM',
       W_ROWCOUNT,
       'ACCOUNT NUMBER IS NOT IN MIG_ACNTS',
       'SELECT *
 FROM MIG_LNACDSDTL
WHERE NVL(LNACDSDTL_INTERNAL_ACNUM, 0 ) NOT IN
      (SELECT ACNTS_ACNUM
         FROM MIG_ACNTS
        WHERE ACNTS_PROD_CODE IN
              (SELECT PRODUCT_CODE
                 FROM PRODUCTS
                WHERE PRODUCT_FOR_LOANS = 1));');

  END IF;


--- disbursement date cannot be greater than migration date


      SELECT COUNT(*)
        INTO W_ROWCOUNT
        FROM MIG_LNACDSDTL
       WHERE LNACDSDTL_DISB_DATE > P_START_DATE;

IF W_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACDSDTL',
       'LNACDSDTL_DISB_DATE',
       W_ROWCOUNT,
       'LNACDSDTL_DISB_DATE CANNOT BE GREATER THAN MIGRATION DATE',
       'SELECT *
       FROM MIG_LNACDSDTL
            WHERE LNACDSDTL_DISB_DATE > ''' || P_START_DATE || ''';');

  END IF;


---- disbursement date cannot be less than account opening date

SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_LNACDSDTL , MIG_ACNTS  WHERE
    MIG_LNACDSDTL.LNACDSDTL_INTERNAL_ACNUM = MIG_ACNTS.ACNTS_ACNUM
    AND  MIG_LNACDSDTL.LNACDSDTL_DISB_DATE < MIG_ACNTS.ACNTS_OPENING_DATE ;

IF W_ROWCOUNT > 0
  THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACDSDTL',
       'LNACDSDTL_DISB_DATE',
       W_ROWCOUNT,
       'LNACDSDTL_DISB_DATE CANNOT BE LESS THAN ACCOUNT OPENING DATE',
       'SELECT MIG_ACNTS.ACNTS_ACNUM,
       MIG_ACNTS.ACNTS_AC_TYPE,
       MIG_LNACDSDTL.LNACDSDTL_DISB_DATE,
       MIG_LNACRSDTL.LNACRS_SANC_DATE,
       MIG_ACNTS.ACNTS_OPENING_DATE
  FROM MIG_LNACDSDTL, MIG_ACNTS, MIG_LNACRSDTL , MIG_LNACNT
 WHERE MIG_LNACDSDTL.LNACDSDTL_INTERNAL_ACNUM = MIG_ACNTS.ACNTS_ACNUM
   AND MIG_LNACDSDTL.LNACDSDTL_DISB_DATE < MIG_ACNTS.ACNTS_OPENING_DATE
   AND MIG_LNACRSDTL.LNACRSDTL_ACNUM = MIG_ACNTS.ACNTS_ACNUM
   AND MIG_LNACNT.LNACNT_ACNUM = MIG_ACNTS.ACNTS_ACNUM;');

  END IF;

--- disbursement amount cannot be fraction or less than 1


  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_LNACDSDTL
   WHERE LNACDSDTL_DISB_AMOUNT <> ROUND ( LNACDSDTL_DISB_AMOUNT , 0)
   OR NVL(LNACDSDTL_DISB_AMOUNT, 0 ) < 1 ;


  IF W_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACDSDTL',
       'LNACDSDTL_DISB_AMOUNT',
       W_ROWCOUNT,
       'LNACDSDTL_DISB_AMOUNT CANNOT BE NULL, ZERO, NEGATIVE OR FRACTION',
       'SELECT * FROM MIG_LNACDSDTL WHERE LNACDSDTL_DISB_AMOUNT <> ROUND ( LNACDSDTL_DISB_AMOUNT , 0)
               OR NVL(LNACDSDTL_DISB_AMOUNT, 0 ) < 1 ;');

  END IF;


END SP_LNACDSDTL_VALIDATE;
/