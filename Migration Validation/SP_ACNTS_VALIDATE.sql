CREATE OR REPLACE PROCEDURE SP_ACNTS_VALIDATE(P_BRANCH_CODE IN NUMBER,
                                              P_START_DATE  IN DATE) IS
  W_SQL      VARCHAR2(3000);
  W_BRN_CODE NUMBER(5) := P_BRANCH_CODE;
  --W_MIG_DATE DATE := P_START_DATE;
  W_ROWCOUNT NUMBER := 0;
  X_ROWCOUNT NUMBER := 0;
  Y_ROWCOUNT NUMBER := 0;
  Z_ROWCOUNT NUMBER := 0;
  P_ROWCOUNT NUMBER := 0;
  Q_ROWCOUNT NUMBER := 0;
  R_ROWCOUNT NUMBER := 0;
  S_ROWCOUNT NUMBER := 0;
  T_ROWCOUNT NUMBER := 0;
  U_ROWCOUNT NUMBER := 0;
  V_ROWCOUNT NUMBER := 0;
  O_ROWCOUNT NUMBER := 0;

BEGIN
  DELETE FROM ERRORLOG WHERE TEMPLATE_NAME = 'MIG_ACNTS';
  COMMIT;

  -------------------------------------------- Some Updates ------------------------------------------------

  UPDATE MIG_ACNTS
     SET ACNTS_LAST_TRAN_DATE = ACNTS_OPENING_DATE
   WHERE ACNTS_LAST_TRAN_DATE < ACNTS_OPENING_DATE;
  COMMIT;

  UPDATE MIG_ACNTS
     SET ACNTS_INT_ACCR_UPTO = P_START_DATE
   WHERE ACNTS_PROD_CODE IN (1030, 1040, 1060)
     AND ACNTS_INT_ACCR_UPTO <> P_START_DATE;
  COMMIT;

  UPDATE MIG_ACNTS
     SET ACNTS_LAST_CHQBK_ISSUED = ACNTS_OPENING_DATE
   WHERE ACNTS_LAST_CHQBK_ISSUED < ACNTS_OPENING_DATE;
  COMMIT;

  UPDATE MIG_ACNTS A
     SET A.ACNTS_PROD_CODE = 1072, A.ACNTS_AC_TYPE = 'MESN'
   WHERE A.ACNTS_PROD_CODE = 1070
     AND A.ACNTS_OPENING_DATE > '01-JAN-2014';
  COMMIT;
  
  
  
  UPDATE MIG_ACNTS A
     SET A.ACNTS_PROD_CODE = 1070, A.ACNTS_AC_TYPE = 'MES'
   WHERE A.ACNTS_PROD_CODE = 1072
     AND A.ACNTS_OPENING_DATE < '01-JAN-2014';
  COMMIT;
  
  

  UPDATE MIG_ACNTS A SET A.ACNTS_ENTD_ON = A.ACNTS_OPENING_DATE;
  COMMIT;

  UPDATE MIG_ACNTS A
     SET A.ACNTS_FREEZED_ON = P_START_DATE
   WHERE A.ACNTS_DB_FREEZED = 1
      OR A.ACNTS_CR_FREEZED = 1;
  COMMIT;

  UPDATE MIG_ACNTS A
     SET A.ACNTS_DORMANT_ACNT = 1
   WHERE A.ACNTS_DORMANT_ACNT = 0
     AND A.ACNTS_INOP_ACNT = 1;
  COMMIT;
  ----------------------------------------------------------------------------------------------------------

  --- branch code checking

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTS
   WHERE NVL(ACNTS_BRN_CODE, 0) <> W_BRN_CODE;

  IF W_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_BRN_CODE',
       W_ROWCOUNT,
       'ACNTS_BRN_CODE SHOULD BE ' || W_BRN_CODE,
       'SELECT ACNTS_ACNUM, ACNTS_BRN_CODE FROM MIG_ACNTS  WHERE NVL(ACNTS_BRN_CODE, 0 ) <> ' ||
       W_BRN_CODE);
  
  END IF;

  --- Junk account number and length checking for accounts

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTS
   WHERE LENGTH(TRIM(TRANSLATE(MIG_ACNTS.ACNTS_ACNUM, '0123456789', ' '))) <> 0
      OR LENGTH(TRIM(MIG_ACNTS.ACNTS_ACNUM)) <> 13;

  IF W_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_ACNUM',
       W_ROWCOUNT,
       'INVALID ACCOUNT NUMBER',
       'SELECT * FROM  MIG_ACNTS
             WHERE LENGTH(TRIM(TRANSLATE(MIG_ACNTS.ACNTS_ACNUM, ''0123456789'', '' ''))) <> 0
          OR LENGTH(TRIM(MIG_ACNTS.ACNTS_ACNUM)) <> 13;');
  
  END IF;
  
  --- Junk account number and length checking for transaction profile 
  
   SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTRNPR
   WHERE LENGTH(TRIM(TRANSLATE(MIG_ACNTRNPR.ACTP_ACNT_NUM, '0123456789', ' '))) <> 0
      OR LENGTH(TRIM(MIG_ACNTRNPR.ACTP_ACNT_NUM)) <> 13;

  IF W_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTRNPR',
       'ACTP_ACNT_NUM',
       W_ROWCOUNT,
       'INVALID ACCOUNT NUMBER IN TRANSACTION PROFILE TABLE',
       'SELECT * FROM  MIG_ACNTRNPR
             WHERE LENGTH(TRIM(TRANSLATE(MIG_ACNTRNPR.ACTP_ACNT_NUM, ''0123456789'', '' ''))) <> 0
          OR LENGTH(TRIM(MIG_ACNTRNPR.ACTP_ACNT_NUM)) <> 13;');
  
  END IF;
  

  --- checking if client code Iis null OR not in mig_clients and joint clients

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTS
   WHERE NVL(ACNTS_CLIENT_NUM, 0) NOT IN
         (SELECT CLIENTS_CODE
            FROM MIG_CLIENTS
          UNION
          SELECT JNTCL_JCL_SL
            FROM MIG_JOINTCLIENTS);

  IF W_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_CLIENT_NUM',
       W_ROWCOUNT,
       'ACNTS_CLIENT_NUM NOT FOUND IN MIG_CLIENTS',
       'SELECT * FROM MIG_ACNTS
   WHERE NVL(ACNTS_CLIENT_NUM, 0 ) NOT IN
         (SELECT CLIENTS_CODE
            FROM MIG_CLIENTS
          UNION
          SELECT JNTCL_JCL_SL
            FROM MIG_JOINTCLIENTS);');
  
  END IF;

  ------------------------------------~~~~~~~~~~~~~~~~~~~~~~~~~~~------------------------------
  -------------------------------------- MASTER TABLE MAPPING ---------------------------------

  --- not in acseq

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTS
   WHERE NVL(ACNTS_PROD_CODE, 0) NOT IN
         (SELECT ACSEQ_PRODUCT_CODE FROM ACSEQ);

  IF W_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_PROD_CODE',
       W_ROWCOUNT,
       'PPRODUCT CODE NOT FOUND IN ACSEQ',
       'SELECT ACNTS_ACNUM,
       ACNTS_PROD_CODE,
       ACNTS_AC_TYPE,
       ACNTS_OPENING_DATE,
       ACNTS_GLACC_CODE
  FROM MIG_ACNTS
 WHERE NVL(ACNTS_PROD_CODE, 0 ) NOT IN  (SELECT ACSEQ_PRODUCT_CODE FROM ACSEQ) ;');
  
  END IF;

  --- actypes / product code

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTS A
   WHERE (A.ACNTS_AC_TYPE, A.ACNTS_PROD_CODE) NOT IN
         (SELECT AC.ACTYPE_CODE, AC.ACTYPE_PROD_CODE FROM ACTYPES AC);

  IF W_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_AC_TYPE, ACNTS_PROD_CODE ',
       W_ROWCOUNT,
       'ACTYPE_CODE OR ACNTS_PROD_CODE NOT FOUND',
       'SELECT ACNTS_ACNUM,
       ACNTS_PROD_CODE,
       ACNTS_AC_TYPE,
       ACNTS_OPENING_DATE,
       ACNTS_GLACC_CODE
  FROM MIG_ACNTS A
   WHERE (A.ACNTS_AC_TYPE, A.ACNTS_PROD_CODE) NOT IN
        (SELECT AC.ACTYPE_CODE, AC.ACTYPE_PROD_CODE FROM ACTYPES AC);');
  
  END IF;

  --- acc sub types

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTS
   WHERE ACNTS_AC_SUB_TYPE NOT IN
         (SELECT ACSUB_SUBTYPE_CODE FROM ACSUBTYPES);

  IF W_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_AC_SUB_TYPE',
       W_ROWCOUNT,
       'ACSUB_SUBTYPE_CODE NOT FOUND',
       'SELECT ACNTS_ACNUM, ACNTS_AC_TYPE, ACNTS_AC_SUB_TYPE ACNTS_OPENING_DATE
  FROM MIG_ACNTS
 WHERE ACNTS_AC_SUB_TYPE NOT IN (SELECT ACSUB_SUBTYPE_CODE FROM ACSUBTYPES);');
  
  END IF;

  --- gl code checking

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTS
   WHERE NVL(ACNTS_GLACC_CODE, ' ') NOT IN
         (SELECT EXTGL_ACCESS_CODE FROM EXTGL);

  IF W_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_GLACC_CODE',
       W_ROWCOUNT,
       'GL CODE NOT FOUND IN EXTGL',
       'SELECT A.ACNTS_ACNUM, A.ACNTS_OPENING_DATE, A.ACNTS_GLACC_CODE
  FROM MIG_ACNTS A
 WHERE NVL(ACNTS_GLACC_CODE, '' '') NOT IN (SELECT EXTGL_ACCESS_CODE FROM EXTGL);');
  
  END IF;

  --- subtype required for these accounts

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTS AC
   WHERE AC.ACNTS_AC_TYPE IN
         (SELECT A.ACTYPE_CODE
            FROM ACTYPES A
           WHERE A.ACTYPE_SUB_TYPE_REQD = 1)
     AND AC.ACNTS_AC_SUB_TYPE IS NULL;

  IF W_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_AC_SUB_TYPE',
       W_ROWCOUNT,
       'SUBTYPE REQUIRED FOR THESE ACCOUNTS',
       'SELECT * FROM MIG_ACNTS AC WHERE AC.ACNTS_AC_TYPE IN 
 (SELECT A.ACTYPE_CODE FROM ACTYPES A WHERE A.ACTYPE_SUB_TYPE_REQD = 1)
 AND AC.ACNTS_AC_SUB_TYPE IS NULL;');
  
  END IF;

  --- subtype not required for these accounts

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTS AC
   WHERE AC.ACNTS_AC_TYPE IN
         (SELECT A.ACTYPE_CODE
            FROM ACTYPES A
           WHERE A.ACTYPE_SUB_TYPE_REQD = 0)
     AND AC.ACNTS_AC_SUB_TYPE IS NOT NULL;

  IF W_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_AC_SUB_TYPE',
       W_ROWCOUNT,
       'SUBTYPE NOT REQUIRED FOR THESE ACCOUNTS',
       'SELECT * FROM MIG_ACNTS AC WHERE AC.ACNTS_AC_TYPE IN 
 (SELECT A.ACTYPE_CODE FROM ACTYPES A WHERE A.ACTYPE_SUB_TYPE_REQD = 0)
 AND AC.ACNTS_AC_SUB_TYPE IS NOT NULL ;');
  
  END IF;

  ------------------------------------~~~~~~~~~~~~~~~------------------------------------------
  ------------------------------------ Date Validation ----------------------------------------

  SELECT COUNT(CASE
                 WHEN (NVL(ACNTS_OPENING_DATE, '31-DEC-1899') not between
                      '01-jan-1900' and '31-dec-2050') or
                      ACNTS_OPENING_DATE > P_START_DATE THEN
                  'Y'
               END), --- O  -- checking if opening date is null or greater than mig date
         
         COUNT(CASE
                 WHEN (ACNTS_INT_CALC_UPTO not between '01-jan-1900' and
                      '31-dec-2050') or ACNTS_INT_CALC_UPTO < ACNTS_OPENING_DATE THEN
                  'Y'
               END), --P  --- checking ACNTS_INT_CALC_UPTO less than opening date
         
         COUNT(CASE
                 WHEN ACNTS_INT_ACCR_UPTO not between '01-jan-1900' and
                      '31-dec-2050' or ACNTS_INT_ACCR_UPTO < ACNTS_OPENING_DATE THEN
                  'Y'
               END), -- Q --- checking ACNTS_INT_ACCR_UPTO less than opening date
         
         COUNT(CASE
                 WHEN ACNTS_INT_DBCR_UPTO not between '01-jan-1900' and
                      '31-dec-2050' or ACNTS_INT_DBCR_UPTO < ACNTS_OPENING_DATE THEN
                  'Y'
               END), ---R  --- checking ACNTS_INT_DBCR_UPTO less than opening date
         
         COUNT(CASE
                 WHEN ACNTS_BASE_DATE not between '01-jan-1900' and '31-dec-2050' or
                      ACNTS_BASE_DATE < ACNTS_OPENING_DATE THEN
                  'Y'
               END), --S  --- checking ACNTS_BASE_DATE less than opening date
         
         COUNT(CASE
                 WHEN ACNTS_TRF_TO_OVERDUE not between '01-jan-1900' and
                      '31-dec-2050' or ACNTS_TRF_TO_OVERDUE < ACNTS_OPENING_DATE THEN
                  'Y'
               END), -- T  --- checking ACNTS_TRF_TO_OVERDUE less than opening date
         
         COUNT(CASE
                 WHEN ACNTS_LAST_TRAN_DATE not between '01-jan-1900' and
                      '31-dec-2050' or ACNTS_LAST_TRAN_DATE > P_START_DATE THEN
                  'Y'
               END), -- U --- checking ACNTS_LAST_TRAN_DATE greater than migration date
         
         COUNT(CASE
                 WHEN ACNTS_LAST_CHQBK_ISSUED not between '01-jan-1900' and
                      '31-dec-2050' or ACNTS_LAST_CHQBK_ISSUED > P_START_DATE THEN
                  'Y'
               END), -- V --- checking ACNTS_LAST_CHQBK_ISSUED greater than migration date
         
         COUNT(CASE
                 WHEN ACNTS_INT_ACCR_UPTO < ACNTS_INT_DBCR_UPTO THEN
                  'Y'
               END) --X
  
    INTO O_ROWCOUNT,
         P_ROWCOUNT,
         Q_ROWCOUNT,
         R_ROWCOUNT,
         S_ROWCOUNT,
         T_ROWCOUNT,
         U_ROWCOUNT,
         V_ROWCOUNT,
         X_ROWCOUNT
  
    FROM MIG_ACNTS;

  IF O_ROWCOUNT > 0 THEN
  
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_OPENING_DATE',
       O_ROWCOUNT,
       'INVALID ACNTS OPENING DATE',
       'SELECT A.ACNTS_ACNUM, A.ACNTS_OPENING_DATE
  FROM MIG_ACNTS A
 WHERE (NVL(ACNTS_OPENING_DATE, ''31-DEC-1899'') not between
                    ''01-jan-1900'' and ''31-dec-2050'') OR
                    ACNTS_OPENING_DATE > ''' || P_START_DATE || ''';');
  END IF;

  IF P_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_INT_CALC_UPTO',
       P_ROWCOUNT,
       'ACNTS_INT_CALC_UPTO CAN NOT BE LESS THAN OPENING DATE',
       'SELECT ACNTS_ACNUM,
       ACNTS_OPENING_DATE,
       ACNTS_PROD_CODE,
       ACNTS_AC_TYPE,
       ACNTS_INT_CALC_UPTO,
       ACNTS_INT_ACCR_UPTO,
       ACNTS_INT_DBCR_UPTO
  FROM MIG_ACNTS
 WHERE (ACNTS_INT_CALC_UPTO not between ''01-jan-1900'' and
                    ''31-dec-2050'') OR ACNTS_INT_CALC_UPTO < ACNTS_OPENING_DATE;');
  
  END IF;

  IF Q_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_INT_ACCR_UPTO',
       Q_ROWCOUNT,
       'ACNTS_INT_ACCR_UPTO CAN NOT BE LESS THAN OPENING DATE',
       'SELECT ACNTS_ACNUM,
       ACNTS_OPENING_DATE,
       ACNTS_PROD_CODE,
       ACNTS_AC_TYPE,
       ACNTS_INT_CALC_UPTO,
       ACNTS_INT_ACCR_UPTO,
       ACNTS_INT_DBCR_UPTO
  FROM MIG_ACNTS
 WHERE (ACNTS_INT_ACCR_UPTO not between ''01-jan-1900'' and
                    ''31-dec-2050'') OR ACNTS_INT_ACCR_UPTO < ACNTS_OPENING_DATE;');
  
  END IF;

  IF R_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_INT_DBCR_UPTO',
       R_ROWCOUNT,
       'ACNTS_INT_DBCR_UPTO CAN NOT BE LESS THAN OPENING DATE',
       'SELECT ACNTS_ACNUM,
       ACNTS_OPENING_DATE,
       ACNTS_PROD_CODE,
       ACNTS_AC_TYPE,
       ACNTS_INT_CALC_UPTO,
       ACNTS_INT_ACCR_UPTO,
       ACNTS_INT_DBCR_UPTO
  FROM MIG_ACNTS
 WHERE (ACNTS_INT_DBCR_UPTO not between ''01-jan-1900'' and
                    ''31-dec-2050'') OR ACNTS_INT_DBCR_UPTO < ACNTS_OPENING_DATE;');
  
  END IF;

  IF S_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_BASE_DATE',
       S_ROWCOUNT,
       'ACNTS_BASE_DATE CAN NOT BE LESS THAN OPENING DATE',
       'SELECT ACNTS_ACNUM,
       ACNTS_OPENING_DATE,
       ACNTS_PROD_CODE,
       ACNTS_AC_TYPE,
       ACNTS_BASE_DATE
  FROM MIG_ACNTS
 WHERE (ACNTS_BASE_DATE not between ''01-jan-1900'' and
                    ''31-dec-2050'') OR ACNTS_BASE_DATE < ACNTS_OPENING_DATE;');
  
  END IF;

  IF T_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_TRF_TO_OVERDUE',
       T_ROWCOUNT,
       'ACNTS_TRF_TO_OVERDUE CAN NOT BE LESS THAN OPENING DATE',
       'SELECT ACNTS_ACNUM,
       ACNTS_OPENING_DATE,
       ACNTS_PROD_CODE,
       ACNTS_AC_TYPE,
       ACNTS_TRF_TO_OVERDUE
  FROM MIG_ACNTS
 WHERE (ACNTS_TRF_TO_OVERDUE not between ''01-jan-1900'' and
                    ''31-dec-2050'') OR ACNTS_TRF_TO_OVERDUE < ACNTS_OPENING_DATE;');
  
  END IF;

  IF U_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_LAST_TRAN_DATE',
       U_ROWCOUNT,
       'ACNTS_LAST_TRAN_DATE CAN NOT BE GREATER THAN THAN MIGRATION DATE',
       'SELECT ACNTS_ACNUM,
       ACNTS_OPENING_DATE,
       ACNTS_PROD_CODE,
       ACNTS_LAST_TRAN_DATE,
      ACNTS_INT_CALC_UPTO,
       ACNTS_INT_ACCR_UPTO,
       ACNTS_INT_DBCR_UPTO
  FROM MIG_ACNTS
 WHERE (ACNTS_LAST_TRAN_DATE not between ''01-jan-1900'' and
                    ''31-dec-2050'') OR ACNTS_LAST_TRAN_DATE > ''' ||
       P_START_DATE || ''';');
  
  END IF;

  IF V_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_LAST_CHQBK_ISSUED',
       V_ROWCOUNT,
       'ACNTS_LAST_CHQBK_ISSUED CAN NOT BE GREATER THAN THAN MIGRATION DATE',
       'SELECT ACNTS_ACNUM,
       ACNTS_OPENING_DATE,
       ACNTS_PROD_CODE,
       ACNTS_LAST_TRAN_DATE,
      ACNTS_LAST_CHQBK_ISSUED
  FROM MIG_ACNTS
 WHERE (ACNTS_LAST_CHQBK_ISSUED not between ''01-jan-1900'' and
                    ''31-dec-2050'') OR ACNTS_LAST_CHQBK_ISSUED > ''' ||
       P_START_DATE || ''';');
  
  END IF;

  IF X_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_ACNTS',
       'ACNTS_INT_ACCR_UPTO',
       X_ROWCOUNT,
       'ACNTS_INT_ACCR_UPTO CAN NOT BE LESS THAN ACNTS_INT_DBCR_UPTO',
       'SELECT ACNTS_ACNUM,
       ACNTS_OPENING_DATE,
       ACNTS_PROD_CODE,
       ACNTS_AC_TYPE,
       ACNTS_INT_ACCR_UPTO,
       ACNTS_INT_DBCR_UPTO
  FROM MIG_ACNTS
 WHERE ACNTS_INT_ACCR_UPTO < ACNTS_INT_DBCR_UPTO;');
  
  END IF;

END SP_ACNTS_VALIDATE;
/