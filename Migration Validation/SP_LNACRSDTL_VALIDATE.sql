CREATE OR REPLACE PROCEDURE SP_LNACRSDTL_VALIDATE(P_BRANCH_CODE IN NUMBER,
                                               P_START_DATE  IN DATE) IS
  W_ROWCOUNT NUMBER := 0;
  P_ROWCOUNT NUMBER := 0;
  Q_ROWCOUNT NUMBER := 0;
  R_ROWCOUNT NUMBER := 0;
  S_ROWCOUNT NUMBER := 0;
  T_ROWCOUNT NUMBER := 0;
  O_ROWCOUNT NUMBER := 0;

BEGIN
  DELETE FROM ERRORLOG WHERE TEMPLATE_NAME = 'MIG_LNACRSDTL';
  COMMIT;

  DELETE FROM MIG_LNACRSDTL
   WHERE LNACRSDTL_ACNUM NOT IN
         (SELECT A.ACNTS_ACNUM
            FROM MIG_ACNTS A
           WHERE A.ACNTS_PROD_CODE IN
                 (SELECT P.PRODUCT_CODE
                    FROM PRODUCTS P
                   WHERE P.PRODUCT_FOR_LOANS = 1
                     AND P.PRODUCT_FOR_RUN_ACS = 0));
  COMMIT;

  --- checking  LNACRSDTL_ACNUM  not in MIG_ACNTS loan account

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_LNACRSDTL
   WHERE LNACRSDTL_ACNUM NOT IN
         (SELECT ACNTS_ACNUM
            FROM MIG_ACNTS
           WHERE ACNTS_PROD_CODE IN
                 (SELECT PRODUCT_CODE
                    FROM PRODUCTS
                   WHERE PRODUCT_FOR_LOANS = 1));

  IF W_ROWCOUNT > 0 THEN

    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRSDTL_ACNUM',
       W_ROWCOUNT,
       'LNACRSDTL_ACNUM SHOULD BE EXISTS IN LOAN ACCOUNT OF MIG_ACNTS',
       'SELECT * FROM MIG_LNACRSDTL WHERE LNACRSDTL_ACNUM NOT IN
       (SELECT ACNTS_ACNUM FROM MIG_ACNTS WHERE ACNTS_PROD_CODE IN
       (SELECT PRODUCT_CODE FROM PRODUCTS WHERE PRODUCT_FOR_LOANS = 1));');
  END IF;

  --- checking LNACRSDTL_ACNUM in MIG_LNACNT account number..

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_LNACRSDTL
   WHERE LNACRSDTL_ACNUM NOT IN (SELECT LNACNT_ACNUM FROM MIG_LNACNT);

  IF W_ROWCOUNT > 0 THEN

    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRSDTL_ACNUM',
       W_ROWCOUNT,
       'LNACRSDTL_ACNUM SHOULD BE IN MIG_LNACNT',
       'SELECT * FROM MIG_LNACRSDTL WHERE LNACRSDTL_ACNUM NOT IN (SELECT LNACNT_ACNUM FROM MIG_LNACNT);');
  END IF;

  --- Term loan but missing in mig_lnacrsdtl

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_ACNTS A
   WHERE A.ACNTS_PROD_CODE IN
         (SELECT P.PRODUCT_CODE
            FROM PRODUCTS P
           WHERE P.PRODUCT_FOR_LOANS = 1
             AND P.PRODUCT_FOR_RUN_ACS = 0)
     AND A.ACNTS_ACNUM NOT IN
         (SELECT MIG_LNACRSDTL.LNACRSDTL_ACNUM FROM MIG_LNACRSDTL)
     AND A.ACNTS_ACNUM IN
         (SELECT ACOP_AC_NUM FROM MIG_ACOP_BAL WHERE ACOP_BALANCE <> 0);

  IF W_ROWCOUNT > 0 THEN

    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRSDTL_ACNUM',
       W_ROWCOUNT,
       'TERM LOAN BUT MISSING IN MIG_LNACRSDTL',
       'SELECT A.ACNTS_ACNUM,
        A.ACNTS_PROD_CODE,
        A.ACNTS_OPENING_DATE,
        A.ACNTS_LAST_TRAN_DATE,
        A.ACNTS_INT_ACCR_UPTO
   FROM MIG_ACNTS A
  WHERE A.ACNTS_PROD_CODE IN
        (SELECT P.PRODUCT_CODE
           FROM PRODUCTS P
          WHERE P.PRODUCT_FOR_LOANS = 1
            AND P.PRODUCT_FOR_RUN_ACS = 0)
    AND A.ACNTS_ACNUM NOT IN
        (SELECT MIG_LNACRSDTL.LNACRSDTL_ACNUM FROM MIG_LNACRSDTL)
    AND A.ACNTS_ACNUM IN
        (SELECT ACOP_AC_NUM FROM MIG_ACOP_BAL WHERE ACOP_BALANCE <> 0);');

  END IF;

  ---LNACRS_SANC_REF_NUM  should  not be null

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_LNACRSDTL
   WHERE LNACRS_SANC_REF_NUM IS NULL;

  IF W_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRS_SANC_REF_NUM',
       W_ROWCOUNT,
       'LNACRS_SANC_REF_NUM  SHOULD NOT BE NULL',
       'SELECT LNACRSDTL_ACNUM,LNACRS_SANC_REF_NUM FROM MIG_LNACRSDTL WHERE LNACRS_SANC_REF_NUM IS NULL;');
  END IF;

  ---LNACRSDTL_REPAY_AMT  should  not be null

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_LNACRSDTL
   WHERE  LNACRSDTL_REPAY_AMT <> ROUND ( LNACRSDTL_REPAY_AMT , 0)
   OR NVL(LNACRSDTL_REPAY_AMT, 0 ) < 1 ;
   
   
   

  IF W_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRSDTL_REPAY_AMT',
       W_ROWCOUNT,
       'LNACRSDTL_REPAY_AMT  SHOULD NOT BE NULL OR ZERO',
       'SELECT LNACRSDTL_ACNUM,LNACRSDTL_REPAY_AMT FROM MIG_LNACRSDTL WHERE  LNACRSDTL_REPAY_AMT <> ROUND ( LNACRSDTL_REPAY_AMT , 0)
   OR NVL(LNACRSDTL_REPAY_AMT, 0 ) < 1 ;');
  END IF;

  ---LNACRSDTL_REPAY_FREQ  should  not be null

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_LNACRSDTL
   WHERE NVL(LNACRSDTL_REPAY_FREQ, ' ') NOT IN ('M', 'Q', 'H', 'Y', 'X');

  IF W_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRSDTL_REPAY_FREQ',
       W_ROWCOUNT,
       'LNACRSDTL_REPAY_FREQ MUST HAVE A VALUE WITHIN M,Q,H,Y,X',
       'SELECT LNACRSDTL_ACNUM,LNACRSDTL_REPAY_FREQ FROM MIG_LNACRSDTL WHERE
       LNACRSDTL_REPAY_FREQ IS NULL OR LNACRSDTL_REPAY_FREQ
       NOT IN
       (' || '''' || 'M' || '''' || ',' || '''' || 'Q' || '''' || ',' || '''' || 'H' || '''' || ',' || '''' || 'Y' || '''' || ',' || '''' || 'X' || '''' || ');');
  END IF;

 --- LNACRSDTL_NUM_OF_INSTALLMENT  should be greater than 0

  SELECT COUNT(*)
    INTO W_ROWCOUNT
    FROM MIG_LNACRSDTL
   WHERE NVL(LNACRSDTL_NUM_OF_INSTALLMENT, 0) <= 0;

  IF W_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRSDTL_NUM_OF_INSTALLMENT',
       W_ROWCOUNT,
       'LNACRSDTL_NUM_OF_INSTALLMENT  SHOULD BE GREATER THAN 0',
       'SELECT LNACRSDTL_ACNUM, LNACRSDTL_NUM_OF_INSTALLMENT FROM MIG_LNACRSDTL
        WHERE NVL(LNACRSDTL_NUM_OF_INSTALLMENT, 0) <= 0;');
  END IF;



-------------------------------------------- DATE VALIDATIONS --------------------------------------------

  SELECT COUNT(CASE
                 WHEN (NVL(LNACRS_EFF_DATE, '31-DEC-1899') NOT BETWEEN
                      '01-JAN-1900' AND '31-DEC-2050') OR
                      LNACRS_EFF_DATE > P_START_DATE THEN
                  'Y'
               END), --- O  -- checking if effective date is null or greater than mig date

         COUNT(CASE
                 WHEN (NVL(LNACRS_SANC_DATE, '31-DEC-1899') NOT BETWEEN
                      '01-JAN-1900' AND '31-DEC-2050') OR
                      LNACRS_SANC_DATE > P_START_DATE THEN
                  'Y'
               END), --P  --- checking if sanction date is null or greater than mig date

         COUNT(CASE
                 WHEN (NVL(LNACRSDTL_REPAY_FROM_DATE, '31-DEC-1899') NOT BETWEEN
                      '01-JAN-1900' AND '31-DEC-2050') THEN
                  'Y'
               END), -- Q --- checking repayment date is null

         COUNT(CASE
                 WHEN LNACRSDTL_REPAY_FROM_DATE < LNACRS_EFF_DATE THEN
                  'Y'
               END), ---R  --- repayment start from date must not be less than effective date

         COUNT(CASE
                 WHEN LNACRS_SANC_DATE > LNACRS_EFF_DATE THEN
                  'Y'
               END), --S  --- sanction date must be less than or equal to effective date

         COUNT(CASE
                 WHEN LNACRSDTL_REPAY_FROM_DATE < LNACRS_SANC_DATE THEN
                  'Y'
               END) -- T  --- sanction date must be less than or equal to repay from date

    INTO O_ROWCOUNT,
         P_ROWCOUNT,
         Q_ROWCOUNT,
         R_ROWCOUNT,
         S_ROWCOUNT,
         T_ROWCOUNT

    FROM MIG_LNACRSDTL;

  IF O_ROWCOUNT > 0 THEN

    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRS_EFF_DATE',
       O_ROWCOUNT,
       'EFFECTIVE DATE SHOULD NOT BE NULL OR GREATER THAN MIGRATION DATE',
       'SELECT LNACRSDTL_ACNUM,
       LNACRS_EFF_DATE,
       LNACRS_SANC_DATE,
       LNACRSDTL_REPAY_AMT,
       LNACRSDTL_REPAY_FROM_DATE
  FROM MIG_LNACRSDTL
 WHERE (NVL(LNACRS_EFF_DATE, ''31-DEC-1899'') NOT BETWEEN
                    ''01-JAN-1900'' AND ''31-DEC-2050'') OR
                    LNACRS_EFF_DATE > ''' || P_START_DATE || ''' ;');

  END IF;

  IF P_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRS_SANC_DATE',
       P_ROWCOUNT,
       'SANCTION DATE SHOULD NOT BE NULL OR GREATER THAN MIGRATION DATE',
       'SELECT LNACRSDTL_ACNUM,
       LNACRS_EFF_DATE,
       LNACRS_SANC_DATE,
       LNACRSDTL_REPAY_AMT,
       LNACRSDTL_REPAY_FROM_DATE
  FROM MIG_LNACRSDTL
 WHERE (NVL(LNACRS_SANC_DATE, ''31-DEC-1899'') NOT BETWEEN
                    ''01-JAN-1900'' AND ''31-DEC-2050'') OR
                    LNACRS_SANC_DATE > ''' || P_START_DATE || ''' ;');

  END IF;

  IF Q_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRSDTL_REPAY_FROM_DATE',
       Q_ROWCOUNT,
       'INVALID REPAYMENT DATE',
       'SELECT LNACRSDTL_ACNUM,
       LNACRS_EFF_DATE,
       LNACRS_SANC_DATE,
       LNACRSDTL_REPAY_AMT,
       LNACRSDTL_REPAY_FROM_DATE
  FROM MIG_LNACRSDTL
 WHERE NVL(LNACRSDTL_REPAY_FROM_DATE, ''31-DEC-1899'') NOT BETWEEN
                    ''01-JAN-1900'' AND ''31-DEC-2050'';');

  END IF;

  IF R_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRSDTL_REPAY_FROM_DATE',
       R_ROWCOUNT,
       'REPAYMENT START FROM DATE CANNOT BE LESS THAN EFFECTIVE DATE',
       'SELECT LNACRSDTL_ACNUM,
       LNACRS_SANC_DATE,
       LNACRS_EFF_DATE,
       LNACRSDTL_REPAY_FROM_DATE,
       LNACRSDTL_REPAY_AMT
  FROM MIG_LNACRSDTL
 WHERE LNACRSDTL_REPAY_FROM_DATE < LNACRS_EFF_DATE;');

  END IF;

  IF S_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRS_SANC_DATE',
       S_ROWCOUNT,
       'SANCTION DATE MUST BE LESS THAN OR EQUAL TO EFFECTIVE DATE',
       'SELECT LNACRSDTL_ACNUM,
       LNACRS_SANC_DATE,
       LNACRS_EFF_DATE,
       LNACRSDTL_REPAY_FROM_DATE,
       LNACRSDTL_REPAY_AMT
  FROM MIG_LNACRSDTL
 WHERE LNACRS_SANC_DATE > LNACRS_EFF_DATE;');

  END IF;

  IF T_ROWCOUNT > 0 THEN
    INSERT INTO ERRORLOG
      (TEMPLATE_NAME, COLUMN_NAME, ROW_COUNT, SUGGESTION, QUERY)
    VALUES
      ('MIG_LNACRSDTL',
       'LNACRS_SANC_DATE',
       T_ROWCOUNT,
       'SANCTION DATE MUST BE LESS THAN OR EQUAL TO REPAY FROM DATE',
       'SELECT LNACRSDTL_ACNUM,
       LNACRS_EFF_DATE,
       LNACRS_SANC_DATE,
       LNACRSDTL_REPAY_FROM_DATE,
       LNACRSDTL_REPAY_AMT
  FROM MIG_LNACRSDTL
  WHERE LNACRSDTL_REPAY_FROM_DATE < LNACRS_SANC_DATE;');

  END IF;

END SP_LNACRSDTL_VALIDATE;
/